name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # FASE 1: Testes básicos
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Excluir algumas combinações para economizar tempo
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install maturin
      run: pip install maturin[patchelf]
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pytest numpy scipy scikit-learn
    
    - name: Check Rust formatting
      run: cargo fmt -- --check
    
    - name: Rust linting
      run: cargo clippy -- -D warnings
    
    - name: Build extension
      run: maturin develop --release
    
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v
        python -c "import nseekfs; print('✅ Import successful')"
    
    - name: Run Rust tests
      run: cargo test --release
    
    # FASE 2: Benchmarks de performance
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        pip install maturin numpy scipy scikit-learn pytest-benchmark
    
    - name: Build optimized extension
      run: maturin develop --release
    
    - name: Run performance benchmarks
      run: |
        python benchmark_comparison.py --datasets=small,medium --export=benchmark_results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json

  # FASE 3: Builds para distribuição
  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build wheels
      run: |
        # FASE 3: Build otimizado para distribuição
        maturin build --release --strip --out dist
        
        # Para Linux, usar manylinux
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          maturin build --release --strip --manylinux 2014 --out dist
        fi
      shell: bash
    
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/

  # FASE 3: Análise de código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install black ruff mypy
        pip install maturin numpy
    
    - name: Check Python formatting with Black
      run: black --check --diff nseekfs/
    
    - name: Lint with Ruff
      run: ruff check nseekfs/
    
    - name: Type check with MyPy
      run: mypy nseekfs/

  # FASE 3: Deploy automático
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [test, benchmark, build-wheels, code-quality]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: dist/
    
    - name: Flatten wheel directories
      run: |
        find dist/ -name "*.whl" -exec mv {} dist/ \;
        find dist/ -name "*.tar.gz" -exec mv {} dist/ \;
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/